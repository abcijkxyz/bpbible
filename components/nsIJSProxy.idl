/*
***** BEGIN LICENSE BLOCK *****
Version: MPL 1.1/GPL 2.0/LGPL 2.1

The contents of this file are subject to the Mozilla Public License Version
1.1 (the "License"); you may not use this file except in compliance with
the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
for the specific language governing rights and limitations under the
License.

The Original Code is the XPCOM Python/Javascript Proxy.

The Initial Developer of the Original Code is
Rasjid Wilcox.
Portions created by the Initial Developer are Copyright (C) 2009
the Initial Developer. All Rights Reserved.

Contributor(s):
  Rasjid Wilcox <rasjidw@openminddev.net> (original author)

Alternatively, the contents of this file may be used under the terms of
either the GNU General Public License Version 2 or later (the "GPL"), or
the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
in which case the provisions of the GPL or the LGPL are applicable instead
of those above. If you wish to allow use of your version of this file only
under the terms of either the GPL or the LGPL, and not to allow others to
use your version of this file under the terms of the MPL, indicate your
decision by deleting the provisions above and replace them with the notice
and other provisions required by the GPL or the LGPL. If you do not delete
the provisions above, a recipient may use your version of this file under
the terms of any one of the MPL, the GPL or the LGPL.

***** END LICENSE BLOCK *****
*/

#include "nsISupports.idl"

[scriptable, uuid(c9023a61-1adb-11de-a23c-000c292cf949)]
interface nsIJSProxy : nsISupports
{
  attribute nsISupports xpcomObject;

  string getPropsMethods();
  # returns a string "<prop1>,<prop2>...<propN>|<method1>,<method2>...<methodN>"
  # or would a JSON list object be better?
  
  void clearArgs();
  void addNullArg();
  void addBooleanArg(in boolean arg);
  void addStringArg(in wstring arg);
  # pass integers as strings to avoid issues around types of integers
  void addIntArg(in string arg);
  void addDoubleArg(in double arg);
  void addJSONArg(in wstring arg);
  void addXPCOMArg(in nsISupports arg);
  
  # keeps 'remote' objects in the javascript namespace, for callbacks / event handlers
  void registerXPCOMObject(in string register_id, in nsISupports xpcom_object);
  void unregisterXPCOMObject(in string register_id);
  
  void getProperty(in string prop_name);
  void setProperty(in string prop_name);
  void callMethod(in string method_name);

  # result type is 'null', 'boolean', 'string', 'number', 'object' or 'error'
  string getResultType();
  wstring getResult();
  nsISupports getXPCOMResult();
};  
